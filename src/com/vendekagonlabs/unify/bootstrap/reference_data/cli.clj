;; Copyright 2023 Vendekagon Labs. All Rights Reserved.
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;      http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS-IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
(ns com.vendekagonlabs.unify.bootstrap.reference-data.cli
  (:require [clojure.tools.cli :as tools.cli]
            [clojure.string :as string]
            [clojure.java.io :as io]
            [com.vendekagonlabs.unify.util.io :as util.io]
            [com.vendekagonlabs.unify.bootstrap.data.anatomic-sites :as anatomic-sites]
            [com.vendekagonlabs.unify.bootstrap.data.cell-types :as cell-types]
            [com.vendekagonlabs.unify.bootstrap.data.diseases :as diseases]
            [com.vendekagonlabs.unify.bootstrap.data.drugs :as drugs]
            [com.vendekagonlabs.unify.bootstrap.data.genes :as genes]
            [com.vendekagonlabs.unify.bootstrap.data.nanostring-signatures :as nanostring-signatures]
            [com.vendekagonlabs.unify.bootstrap.data.proteins :as proteins]
            [com.vendekagonlabs.unify.bootstrap.data.so-sequence-features :as so-sequence-features]))


(defn usage [options-summary]
  (->> ["Generate transaction data for the specified reference data type from a third party resource."
        "Refer to docs/reference-data.md or the boostrap.data namespaces for more information on obtaining files."
        ""
        "Usage: bootstrap-reference-data [--type-option] file1 [file2 ...] [--output-file alt-output]"
        ""
        #_options-summary ;; Manual options-summary for now given specificity of combos in control plane
        ""
        "Data types and their corresponding required files:"
        "  --genes                 hgnc_complete_set.txt hgnc2ensembl_coords.csv "
        "  --anatomic-sites        sample.yaml"
        "  --proteins              uniprot_sprot.xml HUMAN_9606_idmapping.dat all-hugos.edn"
        "  --cell-types            cl.obo"
        "  --diseases              pt.asc llt.asc "
        "  --drugs                 DD.txt SDG.txt SDGContent.txt"
        "  --so-sequence-features  so.obo"
        "  --nanostring-signatures SignatureAlgorithms-DATA-USE.txt"
        ""
        "Data type specific options:"
        " --output-file            For all data types. If not set, outputs to default seed_data/edn/* path."
        " --output-hugos-file      For genes, writing an edn file with all hugos used by protein generation."
        " --assembly               For --genes, Reference genome assembly, defaults to GRCh38 if not provided."
        " --hugos-file             For --proteins, path to the hugos file generated by --genes invocation."
        ""
        "Other:"
        " -h --help                Print usage and exit"
        ""]
       (string/join \newline)))

(def cli-options
  [[nil "--genes"]
   [nil "--proteins"]
   [nil "--cell-types"]
   [nil "--diseases"]
   [nil "--drugs"]
   [nil "--anatomic-sites"]
   [nil "--so-sequence-features"]
   [nil "--nanostring-signatures"]
   [nil "--output-file OUTPUT-FILE"]
   [nil "--output-hugos-file OUTPUT-HUGOS-FILE"]
   [nil "--assembly ASSEMBLY"]
   [nil "--hugos-file HUGOS-FILE"]
   ["-h" "--help" "Print usage and exit."]])

(defn process-gene-files
  [options arguments]
  (let [[hgnc-file ensembl-file] arguments
        assembly (or (and (:assembly options)
                          (keyword "genomic-coordinate.assembly" (:assembly options)))
                     :genomic-coordinate.assembly/GRCh38)]
    (genes/generate-tx-data
      {:hgnc-file hgnc-file
       :hgnc2ensembl-file ensembl-file
       :assembly assembly})))

(defn process-anatomic-sites-files
  [options arguments]
  (let [[gdc-sample-file] arguments
        output-file (or (:output-file options)
                        "seed_data/edn/all-anatomic-site-tx-data.edn")]
    (anatomic-sites/generate-tx-data
      {:gdc-sample-file gdc-sample-file
       :output-file output-file})))

(defn process-proteins-files
  [options arguments]
  (let [[uniprot-xml-file gene-mappings-file] arguments
        output-file (or (:output-file options)
                        "seed_data/edn/all-protein-epitope-tx-data.edn")
        hugo-file (or (:hugos-file options)
                      "seed_data/edn/all-hugos.edn")]
    (proteins/generate-tx-data
      {:gene-mappings-file gene-mappings-file
       :uniprot-xml-file uniprot-xml-file
       :hugo-file hugo-file
       :output-file output-file})))

(defn process-cell-types-files
  [options arguments]
  (let [[cl-obo-file] arguments
        output-file (or (:output-file options)
                        "seed_data/edn/all-cell-type-tx-data.edn")]
    (cell-types/generate-tx-data
      {:obo-file cl-obo-file
       :output-file output-file})))

(defn process-so-sequence-features-files
  [options arguments]
  (let [[ss-ff-obo] arguments
        output-file (or (:output-file options)
                        "seed_data/edn/all-so-sequence-features-tx-data.edn")]
    (so-sequence-features/generate-tx-data
      {:obo-file ss-ff-obo
       :output-file output-file})))

(defn process-drugs-files
  [options arguments]
  (let [[drugs-b3-file sdg-drugs-file sdg-groups-file] arguments
        output-file (or (:output-file options)
                        "seed_data/edn/all-drug-tx-data.edn")]
    (drugs/generate-tx-data
      {:drugs-b3-file drugs-b3-file
       :sdg-drugs-file sdg-drugs-file
       :sdg-groups-file sdg-groups-file
       :output-file output-file})))

(defn process-disease-files
  [options arguments]
  (let [[pref-terms-file ll-terms-file] arguments
        output-file (or (:output-file options)
                        "seed_data/edn/all-disease-tx-data.edn")]
    (diseases/generate-tx-data
      {:preferred-terms-file pref-terms-file
       :ll-terms-file ll-terms-file
       :output-file output-file})))

(defn process-nanostring-files
  [options arguments]
  (let [[ns-sig-file] arguments
        output-file (or (:output-file options)
                        "seed_data/edn/all-nanostring-signatures-tx-data.edn")
        hugos-file (or (:hugos-file options)
                       "seed_data/edn/all-hugos.edn")]
    (nanostring-signatures/generate-tx-data
      {:nanostring-signatures-file ns-sig-file
       :all-hugos-file hugos-file
       :output-file output-file})))


(defn -main [& args]
  (let [{:keys [options arguments] :as parsed} (tools.cli/parse-opts args cli-options)]
    (if-let [output-file (:output-file options)]
      (io/make-parents output-file)
      (util.io/mkdirs! "seed_data/edn"))
    (cond
      ;; public datasets in a suitable order
      (:genes options)
      (process-gene-files options arguments)

      (:proteins options)
      (process-proteins-files options arguments)

      (:cell-types options)
      (process-cell-types-files options arguments)

      (:so-sequence-features options)
      (process-so-sequence-features-files options arguments)

      (:anatomic-sites options)
      (process-anatomic-sites-files options arguments)

      ;; proprietary datasets
      (:drugs options)
      (process-drugs-files options arguments)

      (:diseases options)
      (process-disease-files options arguments)

      (:nanostring-signatures options)
      (process-nanostring-files options arguments)

      :else
      (do
        (println "Invalid options!")
        (println usage [cli-options])))))


(comment
  (-main "--genes" "seed_data/raw/genes/hgnc_complete_set.txt"
                   "seed_data/raw/genes/hgnc2ensembl_coords.csv")
  (-main "--proteins" "seed_data/raw/proteins-epitopes/uniprot_sprot.xml"
                      "seed_data/raw/proteins-epitopes/HUMAN_9606_idmapping.dat")
  (-main "--cell-types" "seed_data/raw/cell-types/cl.obo")
  (-main "--so-sequence-features" "seed_data/raw/so-sequence-features/so.obo")
  (-main "--anatomic-sites" "seed_data/raw/anatomic-sites/sample.yaml"))
